FROM wordpress:latest

# Instal¬∑lar depend√®ncies b√†siques i WP-CLI
RUN apt-get update && apt-get install -y \
    curl \
    default-mysql-client \
    less \
    nano \
    && rm -rf /var/lib/apt/lists/*

# Configuraci√≥ PHP optimitzada
RUN echo "memory_limit = 256M" > /usr/local/etc/php/conf.d/custom.ini && \
    echo "upload_max_filesize = 64M" >> /usr/local/etc/php/conf.d/custom.ini && \
    echo "post_max_size = 64M" >> /usr/local/etc/php/conf.d/custom.ini && \
    echo "max_execution_time = 300" >> /usr/local/etc/php/conf.d/custom.ini

# Habilitar mod_rewrite per permalinks
RUN a2enmod rewrite

# Instal¬∑lar WP-CLI via PHP dins del contenidor
RUN php -r "copy('https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar', 'wp-cli.phar');" && \
    php wp-cli.phar --info && \
    chmod +x wp-cli.phar && \
    mv wp-cli.phar /usr/local/bin/wp && \
    wp --info

# Crear directori del tema i copiar tots els fitxers
RUN mkdir -p /var/www/html/wp-content/themes/malet-torrent
COPY *.php /var/www/html/wp-content/themes/malet-torrent/
COPY style.css /var/www/html/wp-content/themes/malet-torrent/
COPY assets/ /var/www/html/wp-content/themes/malet-torrent/assets/
COPY inc/ /var/www/html/wp-content/themes/malet-torrent/inc/

# Crear directori wp-content amb permisos correctes
RUN mkdir -p /var/www/html/wp-content && \
    chown -R www-data:www-data /var/www/html && \
    chmod -R 755 /var/www/html/wp-content

# Script per configurar permisos dels volums al iniciar
RUN cat > /usr/local/bin/fix-volume-permissions.sh << 'EOF'
#!/bin/bash
# Assegurar permisos correctes per volums persistents
echo "Configurant permisos dels volums persistents..."

# Crear i configurar directoris necessaris per WordPress
mkdir -p /var/www/html/wp-content/plugins
mkdir -p /var/www/html/wp-content/uploads
mkdir -p /var/www/html/wp-content/upgrade
mkdir -p /var/www/html/wp-content/cache

# Configurar permisos per tots els directoris
echo "Configurant permisos per wp-content..."
chown -R www-data:www-data /var/www/html/wp-content
chmod -R 775 /var/www/html/wp-content

# Assegurar permisos espec√≠fics per volums muntats
if [ -d "/var/www/html/wp-content/plugins" ]; then
    echo "Configurant permisos per plugins..."
    chown -R www-data:www-data /var/www/html/wp-content/plugins
    chmod -R 775 /var/www/html/wp-content/plugins
fi

if [ -d "/var/www/html/wp-content/uploads" ]; then
    echo "Configurant permisos per uploads..."
    chown -R www-data:www-data /var/www/html/wp-content/uploads
    chmod -R 775 /var/www/html/wp-content/uploads
fi

echo "‚úÖ Permisos configurats correctament"
EOF

RUN chmod +x /usr/local/bin/fix-volume-permissions.sh

# Definir volums persistents espec√≠fics
VOLUME ["/var/www/html/wp-content/plugins", "/var/www/html/wp-content/uploads"]

# Script per inicialitzar WordPress autom√†ticament
RUN cat > /usr/local/bin/wp-auto-install.sh << 'EOF'
#!/bin/bash
# Script per installar WordPress autom√†ticament amb WP-CLI

echo "=== INICIANDO CONFIGURACI√ìN AUTOM√ÅTICA DE WORDPRESS ==="

# Esperar que WordPress estigui disponible (m√©s fiable que check DB directe)
echo "Esperando que WordPress est√© disponible..."
max_attempts=15
attempt=0

while [ $attempt -lt $max_attempts ]; do
    if wp core version --allow-root --path=/var/www/html >/dev/null 2>&1; then
        echo "‚úì WordPress est√° disponible!"
        break
    fi
    echo "Intento $((attempt + 1))/$max_attempts - WordPress no disponible, esperando..."
    sleep 3
    attempt=$((attempt + 1))
done

if [ $attempt -eq $max_attempts ]; then
    echo "‚ùå Error: WordPress no disponible despu√©s de $max_attempts intentos"
    exit 1
fi

# Verificar si WordPress ja est√† instal¬∑lat
if ! wp core is-installed --allow-root --path=/var/www/html 2>/dev/null; then
    echo "‚öôÔ∏è WordPress no est√° instalado. Iniciando instalaci√≥n autom√°tica..."
    
    # Crear wp-config.php si no existeix
    if [ ! -f /var/www/html/wp-config.php ]; then
        echo "üìù Creando wp-config.php..."
        wp config create \
            --dbname="${WORDPRESS_DB_NAME}" \
            --dbuser="${WORDPRESS_DB_USER}" \
            --dbpass="${WORDPRESS_DB_PASSWORD}" \
            --dbhost="${WORDPRESS_DB_HOST}" \
            --allow-root \
            --path=/var/www/html
    fi
    
    # Instalar WordPress
    echo "üöÄ Instalando WordPress..."
    wp core install \
        --url="${WORDPRESS_URL}" \
        --title="${WORDPRESS_TITLE}" \
        --admin_user="${WORDPRESS_ADMIN_USER}" \
        --admin_password="${WORDPRESS_ADMIN_PASSWORD}" \
        --admin_email="${WORDPRESS_ADMIN_EMAIL}" \
        --skip-email \
        --allow-root \
        --path=/var/www/html
    
    echo "‚úÖ WordPress instalado correctamente!"
else
    echo "‚úì WordPress ya est√° instalado, saltando instalaci√≥n..."
fi

# Configurar WP_ENVIRONMENT_TYPE
echo "üîß Configurando WP_ENVIRONMENT_TYPE: ${WP_ENVIRONMENT_TYPE}..."
wp config set WP_ENVIRONMENT_TYPE "${WP_ENVIRONMENT_TYPE}" --allow-root --path=/var/www/html

# Habilitar Application Passwords per REST API
echo "üîë Habilitando Application Passwords para REST API..."
wp config set APPLICATION_PASSWORDS_ENABLED true --raw --allow-root --path=/var/www/html

# Detectar entorn i configurar URLs adequadament
if [[ "${WP_HOME}" == *"localhost"* ]] || [[ "${WORDPRESS_URL}" == *"localhost"* ]] || [[ "${WORDPRESS_URL}" == *"http://"* ]]; then
    echo "üîß Entorn de desenvolupament detectat - Configurant HTTP..."
    wp config set WP_HOME "${WP_HOME:-${WORDPRESS_URL}}" --allow-root --path=/var/www/html
    wp config set WP_SITEURL "${WP_SITEURL:-${WORDPRESS_URL}}" --allow-root --path=/var/www/html
    wp config set FORCE_SSL_ADMIN false --raw --allow-root --path=/var/www/html
    
    # Eliminar configuracions HTTPS si existeixen
    wp config delete WP_SSLPROXY --allow-root --path=/var/www/html 2>/dev/null || true
    echo "‚úÖ WordPress configurat per HTTP (desenvolupament)"
else
    echo "üîß Entorn de producci√≥ detectat - Configurant HTTPS amb proxy..."
    wp config set WP_HOME "${WP_HOME:-${WORDPRESS_URL}}" --allow-root --path=/var/www/html
    wp config set WP_SITEURL "${WP_SITEURL:-${WORDPRESS_URL}}" --allow-root --path=/var/www/html
    
    # Configurar SSL per proxy invers (Traefik/Dokploy)
    wp config set FORCE_SSL_ADMIN true --raw --allow-root --path=/var/www/html
    wp config set WP_SSLPROXY 1 --raw --allow-root --path=/var/www/html
    echo "‚úÖ WordPress configurat per HTTPS (producci√≥)"
fi

# Configurar Redis per al plugin Redis Object Cache
echo "üîß Configurando Redis para Object Cache..."
wp config set WP_REDIS_HOST "${REDIS_HOST:-redis}" --allow-root --path=/var/www/html
wp config set WP_REDIS_PORT "${REDIS_PORT:-6379}" --raw --allow-root --path=/var/www/html
wp config set WP_REDIS_PASSWORD "${REDIS_PASSWORD}" --allow-root --path=/var/www/html
wp config set WP_REDIS_DATABASE "${REDIS_DATABASE:-0}" --raw --allow-root --path=/var/www/html
wp config set WP_CACHE true --raw --allow-root --path=/var/www/html

# Configurar Redis URL si es proporciona
if [ ! -z "${REDIS_URL}" ]; then
    echo "üîß Configurando Redis URL: ${REDIS_URL}"
    wp config set WP_REDIS_URL "${REDIS_URL}" --allow-root --path=/var/www/html
fi

# Instal¬∑lar i activar plugin Redis Object Cache si no existeix
if ! wp plugin is-installed redis-cache --allow-root --path=/var/www/html 2>/dev/null; then
    echo "üì¶ Instal¬∑lant plugin Redis Object Cache..."
    wp plugin install redis-cache --activate --allow-root --path=/var/www/html
else
    echo "‚úì Plugin Redis Object Cache ja est√† instal¬∑lat"
    wp plugin activate redis-cache --allow-root --path=/var/www/html 2>/dev/null || true
fi

# Activar Redis Object Cache amb retry logic
echo "‚ö° Activant Redis Object Cache..."
max_redis_attempts=5
redis_attempt=0
while [ $redis_attempt -lt $max_redis_attempts ]; do
    if wp redis enable --allow-root --path=/var/www/html 2>/dev/null; then
        echo "‚úÖ Redis Object Cache activat correctament!"
        break
    fi
    echo "Intento $((redis_attempt + 1))/$max_redis_attempts - Redis no disponible, esperant..."
    sleep 3
    redis_attempt=$((redis_attempt + 1))
done

if [ $redis_attempt -eq $max_redis_attempts ]; then
    echo "‚ö†Ô∏è  Warning: No s'ha pogut activar Redis Object Cache. Es pot activar manualment m√©s tard."
else
    echo "‚úÖ Configuraci√≥n Redis completada!"
fi

# Instal¬∑lar plugins requerits autom√†ticament
echo "üì¶ Instalando plugins requeridos..."

# Plugins essencials sempre necessaris
required_plugins=(
    # REQUERITS - Cr√≠tics per al funcionament
    "woocommerce"
    "contact-form-7"
    "jwt-authentication-for-wp-rest-api"

    # MOLT RECOMANATS - Seguretat
    "wordfence"
    "limit-login-attempts-reloaded"

    # RECOMANATS - Rendiment
    "wp-super-cache"

    # FORMULARIS - Ja instal¬∑lats
    "flamingo"
    "wp-mail-smtp"

    # UTILITATS
    "duplicate-post"
)

for plugin in "${required_plugins[@]}"; do
    if ! wp plugin is-installed "$plugin" --allow-root --path=/var/www/html 2>/dev/null; then
        echo "üì¶ Instalando $plugin..."
        if wp plugin install "$plugin" --activate --allow-root --path=/var/www/html; then
            echo "‚úÖ Plugin $plugin instalado y activado"
        else
            echo "‚ùå Error instalando $plugin"
        fi
    else
        echo "‚úì Plugin $plugin ya est√° instalado"
        wp plugin activate "$plugin" --allow-root --path=/var/www/html 2>/dev/null || true
    fi
done

# Crear formularis b√†sics si no existeixen
echo "üìù Verificando formularios b√°sicos..."
if [ $(wp post list --post_type=wpcf7_contact_form --format=count --allow-root --path=/var/www/html 2>/dev/null || echo "0") -eq 0 ]; then
    echo "üìù Creando formulario de contacte b√°sico..."

    # Crear formulari de contacte general
    wp post create \
        --post_type=wpcf7_contact_form \
        --post_title="Contacte General" \
        --post_status=publish \
        --allow-root \
        --path=/var/www/html

    # Obtenir ID del formulari creat
    form_id=$(wp post list --post_type=wpcf7_contact_form --format=ids --allow-root --path=/var/www/html | head -1)

    if [ ! -z "$form_id" ]; then
        # Configurar contingut del formulari
        wp post meta update "$form_id" "_form" \
            '<label> Nom (obligatori)
    [text* your-name] </label>

<label> Email (obligatori)
    [email* your-email] </label>

<label> Tel√®fon
    [tel your-phone] </label>

<label> Assumpte
    [text* your-subject] </label>

<label> Missatge
    [textarea* your-message] </label>

[honeypot honeypot-472]

[submit "Enviar"]' \
            --allow-root --path=/var/www/html

        echo "‚úÖ Formulario b√°sico creado con ID: $form_id"
    fi
else
    echo "‚úì Formularios ya existen, saltando creaci√≥n..."
fi

# Crear usuari API si no existeix
echo "üë§ Verificando usuario orioltestart..."
if ! wp user get orioltestart --allow-root --path=/var/www/html >/dev/null 2>&1; then
    echo "üë§ Creando usuario orioltestart..."
    wp user create orioltestart oriol@testart.cat \
        --role=administrator \
        --user_pass='Arbucies8' \
        --display_name='Oriol Testart' \
        --first_name='Oriol' \
        --last_name='Testart' \
        --allow-root --path=/var/www/html

    # Crear Application Passwords
    echo "üîë Creando Application Passwords..."
    wp user application-password create orioltestart "API Access Frontend" --allow-root --path=/var/www/html
    wp user application-password create orioltestart "Formularis REST API" --allow-root --path=/var/www/html

    echo "‚úÖ Usuario orioltestart creado con Application Passwords"
else
    echo "‚úì Usuario orioltestart ya existe"
fi

# Configurar WP Mail SMTP per MailHog
echo "üìß Configurando WP Mail SMTP para MailHog..."
if wp plugin is-active wp-mail-smtp --allow-root --path=/var/www/html 2>/dev/null; then
    # Configurar opcions b√†siques de WP Mail SMTP
    wp option update wp_mail_smtp '{"mail":{"from_email":"noreply@malet.local","from_name":"Malet Torrent","mailer":"smtp","return_path":true},"smtp":{"host":"mailhog","encryption":"none","port":1025,"auth":false,"user":"","pass":""},"license":{"key":""},"logs":{"enabled":true},"general":{"summary_report_email_disabled":false}}' --format=json --allow-root --path=/var/www/html

    echo "‚úÖ WP Mail SMTP configurado para MailHog"
else
    echo "‚ö†Ô∏è WP Mail SMTP no est√° activo, saltando configuraci√≥n"
fi

# Configurar WooCommerce b√†sic si est√† actiu
echo "üõçÔ∏è Configurando WooCommerce b√°sico..."
if wp plugin is-active woocommerce --allow-root --path=/var/www/html 2>/dev/null; then
    # Configuraci√≥ b√†sica de la botiga
    wp option update woocommerce_store_address "Carrer Principal, 123" --allow-root --path=/var/www/html
    wp option update woocommerce_store_city "Arb√∫cies" --allow-root --path=/var/www/html
    wp option update woocommerce_store_postcode "17401" --allow-root --path=/var/www/html
    wp option update woocommerce_default_country "ES:GI" --allow-root --path=/var/www/html
    wp option update woocommerce_currency "EUR" --allow-root --path=/var/www/html
    wp option update woocommerce_enable_guest_checkout "yes" --allow-root --path=/var/www/html

    # Saltar wizard de configuraci√≥
    wp option update woocommerce_onboarding_profile '{"completed":true}' --format=json --allow-root --path=/var/www/html
    wp option update woocommerce_task_list_complete "yes" --allow-root --path=/var/www/html

    echo "‚úÖ WooCommerce configurado b√°sicamente"
else
    echo "‚ö†Ô∏è WooCommerce no est√° activo, saltando configuraci√≥n"
fi

# Activar tema
echo "üé® Activando tema ${WORDPRESS_THEME_NAME}..."
if wp theme activate "${WORDPRESS_THEME_NAME}" --allow-root --path=/var/www/html; then
    echo "‚úÖ Tema ${WORDPRESS_THEME_NAME} activado correctamente!"
else
    echo "‚ùå Error activando tema ${WORDPRESS_THEME_NAME}"
fi

echo "üéâ CONFIGURACI√ìN WORDPRESS COMPLETADA!"
EOF

RUN chmod +x /usr/local/bin/wp-auto-install.sh

# Script que executa instalaci√≥ en un proc√©s separat despr√©s que Apache estigui funcionant
RUN cat > /usr/local/bin/docker-entrypoint-with-permissions.sh << 'EOF'
#!/bin/bash
set -e

# Executar script de permisos
/usr/local/bin/fix-volume-permissions.sh

# Executar script d'instalaci√≥ en background despr√©s d'un delay m√©s llarg per Redis
(sleep 20 && /usr/local/bin/wp-auto-install.sh) &

# Executar entrypoint original de WordPress
exec docker-entrypoint.sh "$@"
EOF

RUN chmod +x /usr/local/bin/docker-entrypoint-with-permissions.sh

# Usar entrypoint personalitzat
ENTRYPOINT ["/usr/local/bin/docker-entrypoint-with-permissions.sh"]
CMD ["apache2-foreground"]